{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b6333255",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "# Universal Kriging (UK)\n",
    "\n",
    "TODO define Universal Kriging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "679d43e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import context\n",
    "import salem\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import xarray as xr\n",
    "import geopandas as gpd\n",
    "from pykrige.uk import UniversalKriging\n",
    "\n",
    "import plotly.express as px\n",
    "from datetime import datetime\n",
    "\n",
    "from utils.utils import pixel2poly, plotvariogram\n",
    "from context import data_dir"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5a99623",
   "metadata": {},
   "source": [
    "Open the reformated data with the linear, meter-based, Lambert projection (EPSG:3347). Again this is helpful as lat/lon coordinates are not good for measuring distances which is important for spatial interpolation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "43877c0a",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(str(data_dir) + \"/obs/gpm25.csv\")\n",
    "gpm25 = gpd.GeoDataFrame(\n",
    "    df,\n",
    "    crs=\"EPSG:4326\",\n",
    "    geometry=gpd.points_from_xy(df[\"lon\"], df[\"lat\"]),\n",
    ").to_crs(\"EPSG:3347\")\n",
    "gpm25[\"Easting\"], gpm25[\"Northing\"] = gpm25.geometry.x, gpm25.geometry.y\n",
    "gpm25.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a46409e6",
   "metadata": {
    "lines_to_next_cell": 0
   },
   "source": [
    "### Create Grid\n",
    "Again create a we will create a grid that we want to use for the interpolation.\n",
    "-This will be more useful reprojecting era5 gridded data to act as covariances for interpolation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc8baee4",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "## define the desired  grid resolution in meters\n",
    "resolution = 20_000  # grid cell size in meters\n",
    "\n",
    "## make grid based on dataset bounds and resolution\n",
    "gridx = np.arange(gpm25.bounds.minx.min(), gpm25.bounds.maxx.max(), resolution)\n",
    "gridy = np.arange(gpm25.bounds.miny.min(), gpm25.bounds.maxy.max(), resolution)\n",
    "\n",
    "## use salem to create a dataset with the grid.\n",
    "krig_ds = salem.Grid(\n",
    "    nxny=(len(gridx), len(gridy)),\n",
    "    dxdy=(resolution, resolution),\n",
    "    x0y0=(gpm25.bounds.minx.min(), gpm25.bounds.miny.min()),\n",
    "    proj=\"epsg:3347\",\n",
    "    pixel_ref=\"corner\",\n",
    ").to_dataset()\n",
    "## print dataset\n",
    "krig_ds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "234e8a4d",
   "metadata": {
    "lines_to_next_cell": 0
   },
   "source": [
    "### ERA5 Data\n",
    "Lets open era5 land dataset on the datetime of interest and transform the data to be on our grid for interpolation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd699e21",
   "metadata": {},
   "outputs": [],
   "source": [
    "era_ds = salem.open_xr_dataset(str(data_dir) + f\"/era5-20120716T2200.nc\")\n",
    "era_ds[\"degrees\"] = np.arctan2(era_ds.v10, era_ds.u10) * (180 / np.pi)\n",
    "\n",
    "era_ds = krig_ds.salem.transform(era_ds)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b3cdac0",
   "metadata": {},
   "source": [
    "#### Plot ERA5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aec670c8",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "era_ds[\"degrees\"].plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6aaffc12",
   "metadata": {
    "lines_to_next_cell": 0
   },
   "source": [
    "##  Setup UK"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b5d82670",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "nlags = 15\n",
    "variogram_model = \"spherical\"\n",
    "\n",
    "startTime = datetime.now()\n",
    "krig = UniversalKriging(\n",
    "    x=gpm25[\"Easting\"],\n",
    "    y=gpm25[\"Northing\"],\n",
    "    z=gpm25[\"PM2.5\"],\n",
    "    variogram_model=variogram_model,\n",
    "    nlags=nlags,\n",
    "    external_drift=era_ds[\"degrees\"].values,\n",
    ")\n",
    "print(f\"UK build time {datetime.now() - startTime}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5118fe39",
   "metadata": {
    "lines_to_next_cell": 0
   },
   "source": [
    "### Execute UK\n",
    "Interpolate data to our grid using UK."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a71ea9a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "startTime = datetime.now()\n",
    "z, ss = krig.execute(\"grid\", gridx, gridy)\n",
    "print(f\"UK execution time {datetime.now() - startTime}\")\n",
    "UK_pm25 = np.where(z < 0, 0, z)\n",
    "\n",
    "# krig_ds[\"UK_pm25\"] = ((\"y\", \"x\"), UK_pm25)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e09ef732",
   "metadata": {},
   "source": [
    "### Plot UK\n",
    "Convert data to polygons to be plot-able on a slippy mapbox. This is not necessary but but :)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ca7a80f",
   "metadata": {},
   "outputs": [],
   "source": [
    "polygons, values = pixel2poly(gridx, gridy, UK_pm25, resolution)\n",
    "pm25_model = gpd.GeoDataFrame(\n",
    "    {\"Modelled PM2.5\": values}, geometry=polygons, crs=\"EPSG:3347\"\n",
    ").to_crs(\"EPSG:4326\")\n",
    "\n",
    "fig = px.choropleth_mapbox(\n",
    "    pm25_model,\n",
    "    geojson=pm25_model.geometry,\n",
    "    locations=pm25_model.index,\n",
    "    color=\"Modelled PM2.5\",\n",
    "    color_continuous_scale=\"jet\",\n",
    "    center={\"lat\": 50.0, \"lon\": -110.0},\n",
    "    zoom=2.5,\n",
    "    mapbox_style=\"carto-positron\",\n",
    "    opacity=0.8,\n",
    ")\n",
    "fig.update_layout(margin=dict(l=0, r=0, t=30, b=10))\n",
    "fig.update_traces(marker_line_width=0)"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "main_language": "python",
   "notebook_metadata_filter": "-all"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
