{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d5089a1e",
   "metadata": {},
   "source": [
    "# Kriging"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "812299fa",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "## PurpleAir and Goverment Operatated Air quality Data\n",
    "- See find-pa-station.py,  get-pa-data.py and remormate-gov.py for how I obtanined a nd remotated the data for ease of use."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc6d90b5",
   "metadata": {},
   "source": [
    "## Case Study.\n",
    "\n",
    "I chose to fouce on July 2021, post heat dome with high fire activeity in souther BC and the PNW of the US.\n",
    "\n",
    "TODO add image of smoke from nasa worldview."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "410ba02a",
   "metadata": {
    "lines_to_next_cell": 0
   },
   "outputs": [],
   "source": [
    "import context\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import xarray as xr\n",
    "import salem\n",
    "\n",
    "\n",
    "import geopandas as gpd\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "import plotly.figure_factory as ff\n",
    "from pykrige.ok import OrdinaryKriging\n",
    "from pykrige.uk import UniversalKriging\n",
    "from shapely.geometry import Polygon\n",
    "import shapely\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from utils.utils import pixel2poly\n",
    "\n",
    "from context import data_dir, img_dir\n",
    "import time\n",
    "\n",
    "start_time = time.time()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b65f515",
   "metadata": {
    "lines_to_next_cell": 0
   },
   "source": [
    "### Choose date and time of interest to test kriging\n",
    "dot = \"2021-07-16T22:00:00\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5327ee7",
   "metadata": {
    "lines_to_next_cell": 0
   },
   "outputs": [],
   "source": [
    "## Define domain of interest... this is the same bounds as the BlueSky Canada Forecasts\n",
    "# wesn = [-160.0,-52.0,32.,70.0]\n",
    "# wesn = [-129.0, -90.0, 40.0, 60.0]  ## Big Test Domain\n",
    "wesn = [-126, -105.5, 45.0, 56.5]\n",
    "\n",
    "# wesn = [-129.0, -90.0, 40.0, 60.0]  ## Big Test Domain\n",
    "\n",
    "## Open Government AQ data and index on dot\n",
    "gov_ds = xr.open_dataset(str(data_dir) + f\"/gov_aq.nc\")\n",
    "gov_ds = gov_ds.sel(datetime=\"2021-07-16T22:00:00\")\n",
    "\n",
    "## Open PurpleAir AQ data, index on dot and drop variables to make ds concat with gov_ds\n",
    "pa_ds = xr.open_dataset(str(data_dir) + f\"/purpleair_north_america.nc\")\n",
    "pa_ds = pa_ds.sel(datetime=\"2021-07-16T22:00:00\")\n",
    "pa_ds = pa_ds.drop([\"PM1.0\", \"PM10.0\", \"pressure\", \"PM2.5_ATM\"])\n",
    "\n",
    "## concat both ds on as station id\n",
    "ds = xr.concat([pa_ds, gov_ds], dim=\"id\")\n",
    "\n",
    "# Drop outliers by..\n",
    "ds = ds.where(ds[\"PM2.5\"] < 1000, drop=True)  ## Erroneously high values\n",
    "ds = ds.where(ds[\"PM2.5\"] > 0, drop=True)  ## Non-physical negative values\n",
    "mean = ds[\"PM2.5\"].mean()  ## outside two standard deviation\n",
    "sd = ds[\"PM2.5\"].std()\n",
    "sd_ds = ds.where(\n",
    "    (ds[\"PM2.5\"] > mean - 2 * sd) & (ds[\"PM2.5\"] < mean + 2 * sd), drop=True\n",
    ")\n",
    "\n",
    "sd_ds\n",
    "\n",
    "# Convert our dataset to a dataframe and drop all aq stations outside our domain\n",
    "df_pm25 = sd_ds[\"PM2.5\"].to_dataframe().reset_index()\n",
    "df_pm25 = df_pm25.loc[\n",
    "    (df_pm25[\"lat\"] > wesn[2])\n",
    "    & (df_pm25[\"lat\"] < wesn[3])\n",
    "    & (df_pm25[\"lon\"] > wesn[0])\n",
    "    & (df_pm25[\"lon\"] < wesn[1])\n",
    "]\n",
    "\n",
    "df_pm25.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52ad4792",
   "metadata": {
    "lines_to_next_cell": 0
   },
   "source": [
    "### Plot Data\n",
    "Lets look at the data by first plotting the distribution of the measured PM 2.5 measured values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1c2483ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = ff.create_distplot([sd_ds[\"PM2.5\"].values], [\"PM2.5\"], colors=[\"green\"])\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82877295",
   "metadata": {
    "lines_to_next_cell": 0
   },
   "source": [
    "Now lets spatially look at the data by a scatter plot of the measured PM 2.5 values at each station."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0a506b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = px.scatter_mapbox(\n",
    "    df_pm25,\n",
    "    lat=\"lat\",\n",
    "    lon=\"lon\",\n",
    "    color=\"PM2.5\",\n",
    "    size=\"PM2.5\",\n",
    "    color_continuous_scale=\"RdYlGn_r\",\n",
    "    # hover_name=\"id\",\n",
    "    center={\"lat\": 52.722, \"lon\": -103.915},\n",
    "    hover_data=[\"PM2.5\"],\n",
    "    mapbox_style=\"carto-positron\",\n",
    "    zoom=1.8,\n",
    ")\n",
    "fig.update_layout(margin=dict(l=0, r=100, t=30, b=10))\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16b7416e",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "We can see how the fires in BC are creating poor air quality in the east rockies and praires/plaines."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8dded3e",
   "metadata": {},
   "source": [
    "### Reproject Data\n",
    "\n",
    "We want to convert the data to the linear, meter-based Lambert projection (EPSG:3347) recommended by Statistics Canada. This is helpful as lat/lon coordinates are not good for measuring distances which is important for interpolating data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc75e7a9",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "\n",
    "gpm25 = gpd.GeoDataFrame(\n",
    "    df_pm25,\n",
    "    crs=\"EPSG:4326\",\n",
    "    geometry=gpd.points_from_xy(df_pm25[\"lon\"], df_pm25[\"lat\"]),\n",
    ").to_crs(\"EPSG:3347\")\n",
    "gpm25[\"Easting\"], gpm25[\"Northing\"] = gpm25.geometry.x, gpm25.geometry.y\n",
    "gpm25.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81a760e3",
   "metadata": {},
   "source": [
    "### Create Grid\n",
    "Here we will create a grid we want to use for the interpolate on."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd8bd2ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "resolution = 20_000  # cell size in meters\n",
    "\n",
    "gridx = np.arange(gpm25.bounds.minx.min(), gpm25.bounds.maxx.max(), resolution)\n",
    "gridy = np.arange(gpm25.bounds.miny.min(), gpm25.bounds.maxy.max(), resolution)\n",
    "\n",
    "\n",
    "krig_ds = salem.Grid(\n",
    "    nxny=(len(gridx), len(gridy)),\n",
    "    dxdy=(resolution, resolution),\n",
    "    x0y0=(gpm25.bounds.minx.min(), gpm25.bounds.miny.min()),\n",
    "    proj=\"epsg:3347\",\n",
    "    pixel_ref=\"corner\",\n",
    ").to_dataset()\n",
    "\n",
    "krig_ds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a218dd34",
   "metadata": {
    "lines_to_next_cell": 0
   },
   "source": [
    "## Krig\n",
    "### Ordinary Kriging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "718df274",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "outputs": [],
   "source": [
    "nlags = 15\n",
    "variogram_model = \"spherical\"\n",
    "\n",
    "krig = OrdinaryKriging(\n",
    "    x=gpm25[\"Easting\"],\n",
    "    y=gpm25[\"Northing\"],\n",
    "    z=gpm25[\"PM2.5\"],\n",
    "    variogram_model=variogram_model,\n",
    "    nlags=nlags,\n",
    ")\n",
    "z, ss = krig.execute(\"grid\", gridx, gridy)\n",
    "OK_pm25 = np.where(z < 0, 0, z)\n",
    "\n",
    "# krig_ds[\"OK_pm25\"] = ((\"y\", \"x\"), OK_pm25)\n",
    "\n",
    "polygons, values = pixel2poly(gridx, gridy, OK_pm25, resolution)\n",
    "pm25_model = gpd.GeoDataFrame(\n",
    "    {\"PM_25_modelled\": values}, geometry=polygons, crs=\"EPSG:3347\"\n",
    ").to_crs(\"EPSG:4326\")\n",
    "\n",
    "fig = px.choropleth_mapbox(\n",
    "    pm25_model,\n",
    "    geojson=pm25_model.geometry,\n",
    "    locations=pm25_model.index,\n",
    "    color=\"PM_25_modelled\",\n",
    "    color_continuous_scale=\"RdYlGn_r\",\n",
    "    center={\"lat\": 52.261, \"lon\": -123.246},\n",
    "    zoom=3.5,\n",
    "    mapbox_style=\"carto-positron\",\n",
    ")\n",
    "fig.update_layout(margin=dict(l=0, r=0, t=30, b=10))\n",
    "fig.update_traces(marker_line_width=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "134b8d37",
   "metadata": {},
   "source": [
    "### Universal Kriging"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "main_language": "python",
   "notebook_metadata_filter": "-all"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
